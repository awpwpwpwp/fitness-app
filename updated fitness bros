import sqlite3
import hashlib
import os
import re #regular expressions libary

class database():
    def __init__(self, datbase_file, algorithm = hashlib.new("SHA256")):
        self.conn = sqlite3.connect(datbase_file) #establishes a connection to SQLite database
        self.cursor = self.conn.cursor() #cursor object which is used to execute any SQL query
        self.algorithm = algorithm #creates hashing algorithm variable used to apply to passwords
        

    def create_tables(self): #creates table if they do not already exist
        self.cursor.execute("""CREATE TABLE IF NOT EXISTS users(
                            user_id INTEGER PRIMARY KEY,
                            email VARCHAR, 
                            username VARCHAR,
                            hashed_password VARCHAR,
                            salt VARCHAR
                            )""") #creates the table named users, holds login details
        self.cursor.execute("""CREATE TABLE IF NOT EXISTS users_details(
                            details_id INTEGER PRIMARY KEY,
                            user_id INTEGER,
                            gender VARCHAR,
                            height INTEGER,
                            weight INTEGER,
                            FOREIGN KEY(user_id) REFERENCES users(user_id)
                            )""") #creates the tabled named users_details, holds details of user
    
    def verify_login(self, username, password):
        password_details = ("SELECT hashed_password AND salt FROM users WHERE username = ?", (username))
        print(password_details)

    def create_user(self, email, username, password):
        errors = [] #list of errors after validation
        username_valid = self.username_exists(username) #gets results of username_exists function either true or false
        email_valid = self.valid_email(email) #gets results of valid_email function either true or false
        password_valid, _ = self.validate_password(password) ##gets results of validate_password function either true or false

        if not username_valid: #if username_valid returns false
            errors.append("Username not available") #append username not available to the list of errors
        
        if not email_valid: #if email_valid returns false
            errors.append("Email is not valid")  #append email not valid to list of errors 
         
        if not password_valid: #if password_valid returns false
            _, error_list = self.validate_password(password) #get the error list from result of function
            errors.append("Password errors: " + ", ".join(error_list)) #join the error list without brackets to the list of errors from this function
        
        if not errors: #if no errors are found
          hashed_password, _ = self.validate_password(password) #receive the hashed password from validate password function
          _, salt = self.validate_password(password) #receive the salt from the validate password function 
          self.insert_users(email, username, hashed_password, salt)  #append user inputs, hashed password, salt and the one time passcode to the database
          return "User creation successful" #tell user that the creation was successful
        
        else: #if there were errors 
            for error in errors: #loop through the errors 
                print(error) #print the errors found so user can fix
            return "User creation failed " #tell the user that the creation was not valid


    def username_exists(self, username):
        self.cursor.execute("SELECT * FROM users WHERE username = ?", (username,)) #selects all records and finds if a username is already in the database
        row = self.cursor.fetchone() #fetches one row from the table where the username is found
        
        if row is None: #if the variable has not stored any data
            return True #username is avaibale
        else: 
            return False #if content of row is found in row variable, return username is not available
        

    def valid_email(self, email):
        self.cursor.execute("SELECT * FROM users WHERE email = ?", (email,)) #selects all records and finds if a username is already in the database
        row = self.cursor.fetchone() #fetches one row from the table where the username is found
        
        if row is None: #if the variable has not stored any data
            pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' #email regular expression pattern
    
            if re.match(pattern, email): #if the regular expression pattern for an email matches the email
               return True  #program will do more validation of the email
            else:
               return False  #return false if the email does not fit the regular expression pattern
        else: 
            return "Email is already in use" #if content of row is found in row variable, return username is not available
        

    def validate_password(self, password):
        uppercase_letters = False
        special_characters = False
        number = False
        special_char = ['~', ':', "'", '+', '[', '\\', '@', '^', '{', '%', '(', '-', '"', '*', '|', ',', '&', '<', '`', '}', '.', '_', '=', ']', '!', '>', ';', '?', '#', '$', ')', '/']  
        errors = []


        for char in password: #loops through the password
            if char.isupper(): #checks if any letters in the password is uppercase
                uppercase_letters = True #changes boolean value to true if uppercase letter is found
        
        for special in special_char: #loops through each item in special_char array
            for char in password: #loops through every character in the password
                if special == char: #checkls if any of the looped special_char array matches the password characters
                    special_characters = True #changes boolean value to true if special characters found

        for num in password: #loops through characters in password
            if num.isdigit(): #if a character in a password is a digit
                number = True #change boolean value of number to True

        if len(password) < 8: #checks password for specific security based conditions
            errors.append("Password must be at least 8 characters")
        
        if not uppercase_letters:
            errors.append("Password must at least have one uppercase letter")
        
        if not special_characters:
            errors.append("Password must contain at least one special character")
        
        if not number:
            errors.append("Password must contain one number")
    
        if not errors: #if there are no errors in the list then return the hashed password with salt 
            return self.hash_password(password)
        else: #if there are errrors
            for error in errors: #loop through the list 
              return False, errors

    def hash_password(self, password):
        salt = os.urandom(16) #generates salt value to add to the password
        salted_password = salt + password.encode("UTF-8") #"UTF-8" ensures non-ASCII characters are read and adds salt to password
        self.algorithm.update(salted_password) #updates password after applying hashing algorithm
        hashed_password = self.algorithm.hexdigest() #converts bytes into hex string
        salt = salt.hex() #converts bytes into hex string
        return hashed_password, salt #returns the hashed_password and salt used to store into the database
    
    def reset_passcode(self, email, username):
        errors = []
        self.cursor.execute("SELECT * FROM users WHERE email = ? AND username = ?", (email, username,)) #Check if email and username are in the database
        row = self.cursor.fetchone() #captures the results from checking
    
        if row: #if there are contents of the user stored in "row" then
            password_change = input("Please enter new password: ") #user inputs new password
            password_confirm = input("Please confirm password: ") #user confirmation of password


            if password_change != password_confirm: 
                return False, "Passwords do not match" 
            
            else:
                validate, error_list = self.validate_password(password_change) #captures the results from the function 


            if not validate: #if password validation returns false
                errors.extend(error_list) # extend the error list with all errors from validation
                return False, errors
            else:
                new_password, new_salt = self.hash_password(password_change)
                self.cursor.execute("UPDATE users SET hashed_password = ?, salt = ? WHERE email = ? AND username = ?", (new_password, new_salt, email, username,))
                self.conn.commit()
                return True, "Password reset successful"
        else:
            errors.append("No user found with the provided email and username.")
            return False, errors  # return errors as a list
    

    def insert_users(self, email, username, hashed_password, salt, otp):
        self.cursor.execute("INSERT INTO users (email, username, hashed_password, salt, otp) VALUES (?, ?, ?, ?, ?)", (email, username, hashed_password, salt, otp)) #inserts data into user table with sign up 
        self.conn.commit() #ensures insertion of a new record within user table
     
    def insert_user_details(self, user_id, gender, height, weight):
        self.cursor.execute("INSERT INTO user_details (user_id, gender, height, weight) VALUES (?, ?, ?, ?)", (user_id, gender, height, weight)) #inserts data into user_details table
        self.conn.commit() #ensures insertion of new record within user_details table
                            
    def get_users(self, record_id):
        record = self.cursor.execute(f"SELECT * FROM users WHERE user_id = {record_id}") #gets users information using user input using SQL statement
        self.conn.commit() #ensures that this data is retrieved from the table
        return record.fetchone() #returns the contents back to the program
    
    def get_users_details(self, record_id):
        record = self.cursor.execute(f"SELECT * FROM user_details WHERE details_id = {record_id}") #get user details using user input using SQL statement
        self.conn.commit() #ensures that this data is retrieved from the table
        return record.fetchone() #returns the contents back to the program
 
    def delete_user_record(self, record_id):
        user_record = self.cursor.execute(f"DELETE FROM user WHERE user_id = {record_id}") #gets user input for id and deletes record from user table
        user_details_record = self.cursor.execute(f"DELETE FROM user_details WHERE user_id = {record_id}") #also deletes the record of the same id in user_details to ensure referential intergrity
        self.conn.commit() #ensures that the user data is deleted
        self.conn.commit() #ensures that the user details data is deleted        

        
        
password_checker = database("AAABBB.db")
print(password_checker.reset_passcode("albetpenha14@gmail.com","Sxayz1"))
